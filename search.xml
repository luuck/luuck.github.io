<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue-cli搭建简易个人网站踩坑之旅]]></title>
    <url>%2F2018%2F03%2F12%2Fvue-cli%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[背景一直没有机会练手有关vue的项目，但是作为mvvm的框架已经相当主流，记录一次使用vue-cli快速构建个人网站所经历的问题。vue-cli的构建请参考查看，堪称史上最全 分析页面大体分为4个部分：头部、底部、banner区域、列表区域。公共组件：头部、底部页面组件：banner区域、列表区域 想要直接使用sass，ok吗？no，需要安装node-sass，sass-loader，请参考 favicon图片在index.html上引用无效 如何使用css module？简单说明，css module加入了局部作用域和模块依赖。以往的css都是全局的，对于整个页面都有效，但是会导致对命名规范要求特别高，不然很容易被他人的命名冲突，甚至覆盖。但是css module很好的解决了整个问题，只对当前的组件有效。阮一峰大神css module教程 使用子组件需要使用div或者p包裹起来12// vue父子组件嵌套的时候遇到// Component template should contain exactly one root element. If you are using v-i 小结项目在继续~~待完善总结]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6学习]]></title>
    <url>%2F2018%2F03%2F03%2Fes6%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[背景所有的新技术方案都是着手解决当下技术不足之处的，让我们更易理解、更方便使用，所以需要学习然后加以运用，去极大提高工作效率！！ es6初识es6 全称 ECMAScript 6 ，是JavaScript语言的下一代标准，2015年6月发布，距离发布已经过去快3年了，虽然现在大多数浏览器还不能支持es6的全部语法，不过我们可以用babel( http://babeljs.io/)进行转换成浏览器所能识别的es5的语言（有木有很爽~~），目前就一些常用的知识点做下整理。 let、constes6以前都是通过var声明变量，无论声明在何处，都会被声明在函数的最顶部，具有变量提升的概念；同时没有块级作用域（有函数作用域、全局作用域）。 而es6使用let定义变量，const定义常量，没有变量提升的概念，并且常量不能被修改，同时两者的声明创建了块级作用域(即{}大括号内的代码块)。 123456789&#123; let a = 1; var b = 0;&#125;const c = 2;a // ReferenceError: a is not definedb // 0c = 4; // TypeError: Assignment to constant variable. 解构赋值es6可以按照一定模式，从数组和对象中提取值，对变量进行赋值。 123456789101112131415161718192021222324let a = 1;let b = 2;let c = 3;// 以上可以写成下边的方式let [a, b, c] = [1, 2, 3];// 数组的解构赋值let [foo, [[bar], baz]] = [1, [[2], 3]];foo // 1bar // 2baz // 3// 对象的解构赋值var &#123; foo, bar &#125; = &#123; foo: "aaaa", bar: "bbbb" &#125;;foo; // "aaaa"bar; // "bbbb"// 字符串的解构赋值const [a, b, c, d, e] = 'hello';a // "h"b // "e"c // "l"d // "l"e // "o" 如果解构不成功，变量的值就等于undefined。 函数的扩展 给函数的参数指定默认值，可结合解构赋值使用 允许使用(=&gt;)箭头函数定义函数 es6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。12345678910function log(x, y) &#123; if (typeof y === 'undefined') &#123; y = 'World'; &#125; console.log(x, y);&#125;log('Hello') // Hello Worldlog('Hello', 'China') // Hello Chinalog('Hello', '') // Hello es6允许为函数的参数设置默认值。1234567function log(x, y = 'World') &#123; console.log(x, y);&#125;log('Hello') // Hello Worldlog('Hello', 'China') // Hello Chinalog('Hello', '') // Hello 箭头函数的使用方式：123var f = () =&gt; 5;// 等同于var f = function () &#123; return 5 &#125;; 箭头函数使用注意点： 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。（还未看完） 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 （还未看完） 简洁易读，棒棒棒~ 对象的扩展Object.is()es5 比较两个值相等，我们都知道使用相等运算符（==）和严格相等运算符（===）来比较。 但是他们两者都有各自的缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。12345678Object.is('foo', 'foo') // trueObject.is(&#123;&#125;, &#123;&#125;) // false+0 === -0 //trueNaN === NaN // falseObject.is(+0, -0) // falseObject.is(NaN, NaN) // true Object.assign()用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。1234567const target = &#123; a: 1 &#125;;const source1 = &#123; b: 2 &#125;;const source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);target // &#123;a:1, b:2, c:3&#125; 注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。 Symbol新的原始类型 Promise对象Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。 Promise对象 代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败） 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected es6规定Promise对象是一个构造函数，用来生成Promise实例。1234567const promise = new Promise(function(resolve, reject)&#123; if(/*异步操作成功*/)&#123; resolve(value); &#125;else&#123; reject(error); &#125;&#125;) Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。12345promise.then(function(value)&#123; // success&#125;, function(error)&#123; // fail&#125;) Class生成实例对象的传统方法是通过构造函数。12345678910function Person(name, age)&#123; this.name = name; this.age = age;&#125;Person.prototype.toString = function()&#123; return this.name + ',' + this.age&#125;var p = new Person('墨鱼', 18); es6引入了Class类这个概念，让对象原型的写法更加清晰、更像面向对象编程的语法。123456789class Person&#123; constructor(x, y)&#123; this.x = x; this.y = y; &#125; toString()&#123; return this.name + ',' + this.age; &#125;&#125; Module模块的主要功能两个命令构成：export和import。 export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。123456789101112131415161718//全部导入import people from './example'//有一种特殊情况，即允许你将整个模块当作单一对象进行导入//该模块的所有导出都会作为对象的属性存在import * as example from "./example.js"console.log(example.name)console.log(example.age)console.log(example.getName())//导入部分import &#123;name, age&#125; from './example'// 导出默认, 有且只有一个默认export default App// 部分导出export class App extend Component &#123;&#125;; 小结es6这本书还在撸!]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页播放视频项目总结-flvplayer.swf]]></title>
    <url>%2F2018%2F01%2F31%2F%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-flvplayer-swf%2F</url>
    <content type="text"><![CDATA[背景临近春节,公司品牌部提出了一个需求，制作一个视频播放宣传页，我是负责pc这块的制作。拿到这个项目需求，在设计还没有出稿之前我先梳理了下这个项目的开发难点和重点。难点？视频制作是头一回接触，并且还要兼容到ie6，7（公司的所有项目都必须兼容到ie6，7），我该如何下手？重点？从需求方描述的文档上来看，其实是一个比较简单的展示页，不涉及任何与后端交互的东西，纯前端的一个页面，开发的功能点也只是包含三部分内容：视频播放、新年祝福语滚动播报、公司旗下移动产品的二维码纯展示。那么可见重点也就是视频的播放功能了。 视频播放功能开发初步考虑开发的几种方案: 使用HTML5的video视频标签开发，使用起来确实是挺方便，but，各个浏览器呈现出的样式一点也不统一（各大浏览器厂商真的是风格各异），需要自己手动开发样式吗？问号脸（貌似开发成本太高了，工期不够用）。pass 使用第三方视频播放器组件，例如：腾讯视频的播放器组件，but，视频播放会自动加载广告，什么鬼（又要骗我买VIP）。pass 使用flashPlayer播放器，就是使用他了（严肃认真脸，内心的小九九，之前公司有和37合作一个联运活动，阅读他们代码的时候，看到他们使用了一个flvplayer.swf播放器，并且可以兼容到ie6，最终呈现到所有的浏览器外形真的是一毛一样啊，还好record下来了，此时有了用武之地，顺便透露下flash将于2020停止更新）。 flashPlayer播放器的使用最终的效果图 先贴上关键代码12345678910111213141516171819/** * 视频播放 * @param width 视频的宽度 * @param height 视频的高端 * @param name 视频的名字，例如：brand.flv * @param title 视频的标题 * @param player 视频的播放器，flvplayer.swf * @returns &#123;string&#125; */function flashObj(width, height, name, title, player) &#123; return '&lt;embed width="' + width + '" height="' + height + '" loop="true" ' + 'title="' + title + '" wmode="transparent" ' + 'src="' + player + '" ' + 'allowfullscreen="true" ' + 'flashvars="vcastr_file=' + name + '&amp;IsAutoPlay=1&amp;IsContinue=1&amp;BarPosition=1&amp;BarTransparent=40&amp;IsShowBar=3" ' + 'quality="high" ' + 'pluginspage="http://get.adobe.com/cn/flashplayer" ' + //http://www.macromedia.com/go/getflashplayer 'type="application/x-shockwave-flash"&gt;';&#125; 首先说下flv这个视频文件格式，全称 flash Video，是flash播放器所支持的视频文件格式。我们可以使用一个flvplayer.swf文件去播放flv格式的视频。参数使用规则，这位同学写的很清楚点击查看 填坑来了测试提了个bug：步骤：火狐浏览器未显示视频播放器 看到这个bug，第一想法是不对呀，浏览器会自动检测并主动触发提示的呀，我不信！然而自己测试验证下来，目前就新版的firefox没有这个自动检测的功能，我想，肯定需要扩展这个adobe flash player组件。 真是打脸啊，新版的火狐浏览器（截止本篇文章发布为止版本是58.0.1）没有自动检测是否有安装支持flash播放的插件，并且扩展的组件库里边已经搜索不到任何关于flash的东西了，那么只有用户去主动下载安装火狐版的adobe flash player才可以触发提示用户手动打开flash播放。 （送他一首薛之谦的【你还要我怎么样】） 想了下啊，既然它不能主动触发检测，那么这时代码我需要考虑到一点，先判断当前浏览器所需要的flash存不存在、版本是多少，如果不存在则引导用户去下载安装，如果存在，但是版本过低，也需要引导用户去升级安装。 来，看下调整优化后的效果图： 实现的关键代码片段是：1234567891011121314151617181920212223242526272829303132/** * flash版本提示 * @returns &#123;&#123;f: number, v: number&#125;&#125; */function flashChecker() &#123; var hasFlash = 0; //是否安装了flash var flashVersion = 0; //flash版本 if (document.all) &#123; var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash'); if (swf) &#123; hasFlash = 1; VSwf = swf.GetVariable("$version"); flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]); &#125; &#125; else &#123; if (navigator.plugins &amp;&amp; navigator.plugins.length &gt; 0) &#123; var swf = navigator.plugins["Shockwave Flash"]; if (swf) &#123; hasFlash = 1; var words = swf.description.split(" "); for (var i = 0; i &lt; words.length; ++i) &#123; if (isNaN(parseInt(words[i]))) continue; flashVersion = parseInt(words[i]); &#125; &#125; &#125; &#125; return &#123; f: hasFlash, v: flashVersion &#125;;&#125; 值得注意的一点是：chrome 、 Firefox、IE 这三巨头浏览器所要支持的adobe flash player会有所不同，都有自己支持的版本。所以对应的浏览器打开使用时，你会看到有三个进程的存在。如下图： 案例demo考虑以后可能会被复用，所以封装成了jquery插件插件封装 小结多积累所见所闻，多动手动脑思考总结。 文末彩蛋福利推荐一个好用的工具：格式化工厂需求方提供的视频资源是mp4格式（大概有300M的样子），这时候需要格式化工厂转换下，转成flv的格式，第一次转换，视频播放是全黑的状态且文件的大小在100M左右，百度了下，原来是没有选择正确的格式，经调整后，对输出配置的信息做了以下更改： 质量由高清调整为了中清的样子，视频整体压缩到了60M的样子 视频编码选择H264／AVC编码，解决了黑屏的情况 怎么把mp4视频转换成flv格式的视频，戳一戳这里]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>flash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年总结]]></title>
    <url>%2F2017%2F12%2F31%2F2017%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[岁月是一场有去无回的旅行好的坏的都是风景 关于工作毕业半年了，终于迎来新的一年-2017。“不以规矩，不能成方圆”，从一个自由搬砖猿到一个有组织有规范的的转型算是17年最大的收获吧。 下图是整个一年的工作内容。今年大部分时间都在进行pc活动开发，每到各大节日（传统节日、购物狂欢节），总有一款上线的为期几天的活动项目刺激用户，增加用户的活跃度。 考虑到一年下来活动项目的需求量比较频繁、大体的内容高度相似、开发周期又没有明显缩短，所以9月初开始计划做活动模板的全配置形式以便优化现在开发进度，并且制作基础开发库为辅助开发，极大优化活动开发流程。 此外参与公司大厅聚合页的改版计划、优化官网页面的部分内容等内容。 合作与沟通 与产品：需求频繁改动，每个改动点是否合理，投入产出比是否合理，多和他们沟通交流、确定他们的真实想法 与设计：设计稿文件过大(超过300M都觉得大)，普通的window本本实在是带不动，动不动就曝出内存不足，确定某一些图层可合并的都合并掉（很棒很棒~），可大幅减少文件大小，约定图层有清晰的命名规范 与后端：提前和后端约定接口格式，远离佛系（可以，都行，没关系）接口约定 关于旅行说下最最开心的两次旅行~~ 厦门鼓浪屿和想象中一样，美丽又很文艺的小岛，空气中弥漫着暖暖的阳光，海水与天连接，带有欧式古老的房屋设计，让你感受很梦幻。在日光岩上眺望远处，迎面吹来的海风微微拂过耳边，相当的惬意。(2017最潮拍摄方式叠影重现^_^) 舟山东极岛这趟旅行没有计划，很随意，一场说走就走的旅行也许就是这个样子吧。七个小伙伴，背上行囊去到了祖国最东边的小岛，在第一缕阳光观景台看着太阳缓缓升起，夜晚在岛上夜排挡上喝着小酒，吃着叫不出名字的海鲜，微凉的海风侵入心脾，住在岛上最高点的青年旅社，和来自其他地方的朋友相聚畅谈。 旅行跟随心动！ 关于追剧强烈推荐看的剧 白夜追凶：年度最佳破案悬疑网络剧，整部剧感觉很真实，细极思恐 寻梦环游记：抑制不住的泪点，观看时请备好纸巾 芳华：愿所有善良的人都被这个世界善待 关于计划小小的目标和任务，2018整装待发。]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让Windows用户快速上手Git]]></title>
    <url>%2F2017%2F02%2F10%2F%E8%AE%A9Windows%E7%94%A8%E6%88%B7%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BGit%2F</url>
    <content type="text"><![CDATA[背景喜讯！！公司的版本控制终于由svn转到了git，刚开始使用Git（分布式版本控制系统），作为Windows用户的使用者，少不了TortoiseGit工具（命令操作实在不符合Windows用户的用户习惯）。 分布式如何理解？举个场景：每个开发人员都有一个本地仓库，即使没有网络也可以提交，查看历史版本记录，创建项目分支等常见操作，等下次网络链接的时候在推送到服务端。总结为一句话就是：git可以不依赖网络对分支和合并等进行操作。 git常用的分支目录git的几个比较重要的分支master、hotfix、develop、feature，这也是我们经常会用到的分支目录。 master：主分支 hotfix：紧急任务分支 base on master develop：开发分支 base on master feature：新功能分支 base on develop bug：bug修复分支 base on develop 有了这些基本的分支结构，当我们在项目开发的过程中，我们就能更加清晰的开发每个版本，每个版本又能不断新增功能，修复bug。 如何使用TortoiseGit工具？1.clone点击右键选择TortoiseGit，选择Git clone 2.create branch点击右键选择TortoiseGit，选择Create Branch…，在Branch框中填写新分支的名称（若选中”switch to new branch”则直接转到新分支上，省略step3），点击OK按钮； ==注意==：在你切换到新分支上会出现一个error，提示“fatal：Not a valid object name:’master’.”OMG~，原来是master分支需要有一次提交，才可以创建新分支。当然你已经从远程服务器上clone下来的repo，已经是一个真正的master分支，所以不会报这个error。 3.通过“Switch/Checkout”切换到新创建的分支上，点击OK 4.merge branch进行分支合并之前我们需要明确哪个分支将要合并到哪个分支，首先通过“Switch/CheckOut”切换到主干分支（如develop分支）,然后通过“Merge”继进行合并操作，在对话框中选择需要合并的分支。分支合并成功后，我们即可以通过Commit与PUSH操作将合并上传到中心服务器 5.delete branch删除分支前先合并分支到主分支上 小结就是让你如此简单的上手~]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-word]]></title>
    <url>%2F2017%2F02%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
